#!/bin/bash
#
# kubenx(1) is a utility to switch between Kubernetes namespaces.

# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "${SCRIPT_DIR}/utils.bash"

KUBENS_DIR="${HOME}/.kube/kubens"

usage() {
  cat <<"EOF"
USAGE:
  kubens                    : list the namespaces in the current context
  kubens <NAME>             : change the active namespace of current context
  kubens -                  : switch to the previous namespace in this context
  kubens -h,--help          : show this message
EOF
  exit 1
}

get_namespaces() {
  kubectl get namespaces -o=jsonpath='{range .items[*].metadata.name}{@}{"\n"}{end}'
}

current_namespace() {
  local cur_ctx=$(current_context)
  ns="$(kubectl config view -o=jsonpath="{.contexts[?(@.name==\"${cur_ctx}\")].context.namespace}")"
  if [[ -z "${ns}" ]]; then
    echo "default"
  else
    echo "${ns}"
  fi
}

set_namespace() {
  kubectl config set-context "$(kubectl config current-context)" --namespace="${1}"
  echo "Active namespace is \"${1}\"."
}

switch_namespace() {
  if grep -q ^"${1}"\$ <(get_namespaces); then
    set_namespace "${1}" 
  else
    echo "Namespace \"${1}\" does not exist."
  fi
}

list_namespaces() {
  local cur="$(current_namespace)"
  local yellow=$(tput setaf 3)
  local darkbg=$(tput setab 0)
  local normal=$(tput sgr0)

  for c in $(get_namespaces); do
  if [[ "${c}" = "${cur}" ]]; then
    echo "${darkbg}${yellow}${c}${normal}"
  else
    echo "${c}"
  fi
  done
}

main() {
  if [[ "$#" -eq 0 ]]; then
    list_namespaces
  elif [[ "$#" -eq 1 ]]; then
    if [[ "${1}" == '-h' || "${1}" == '--help' ]]; then
      usage
    elif [[ "${1}" == "-" ]]; then
      swap_namespace
    elif [[ "${1}" =~ ^-(.*) ]]; then
      echo "error: unrecognized flag \"${1}\"" >&2
      usage
    elif [[ "${1}" =~ (.+)=(.+) ]]; then
      alias_context "${BASH_REMATCH[2]}" "${BASH_REMATCH[1]}"
    else
      switch_namespace "${1}"
    fi
  else
    echo "error: too many flags" >&2
    usage
  fi
}

main "$@"
